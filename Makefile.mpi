# dirs
OBJDIR=objs
SRCDIR=src
LIBDIR=lib
UNAME=$(shell uname)
HOSTNAME=$(shell hostname)

# compiler
CXX=mpic++

# compile flags
CXXFLAGS+=-O3 -m64 -fopenmp #Wa,-q
ifeq ($(UNAME), Linux)
	CXXFLAGS+=-mavx
endif

# include flags
INCFLAGS+=$(foreach d, $(VPATH), -I$d)
INCFLAGS+=-I$(LIBDIR)/glog/include
ifeq ($(HOSTNAME), latedays.andrew.cmu.edu)
	INCFLAGS+=-I/opt/openmpi/include
	INCFLAGS+=-I$(HOME)/tool/openblas/openblas/include
else
ifneq (,$(findstring andrew.cmu.edu,$(HOSTNAME)))
	INCFLAGS+=-I$(HOME)/tool/openmpi/include
	INCFLAGS+=-I$(HOME)/tool/openblas/openblas/include
else
ifneq (,$(findstring Zander,$(HOSTNAME)))
	INCFLAGS+=-I$(LIBDIR)/openblas/include
endif
endif
endif

# link flags
LDFLAGS+=-lmpi -lmpi_cxx -lgfortran -lpthread -lopenblas -lglog
LDFLAGS+=-L$(LIBDIR)
LDFLAGS+=-L$(LIBDIR)/glog/lib
ifeq ($(HOSTNAME), latedays.andrew.cmu.edu)
	LDFLAGS+=-L/opt/openmpi/lib
	LDFLAGS+=-L$(HOME)/tool/openblas/openblas/lib
else
ifneq (,$(findstring andrew.cmu.edu,$(HOSTNAME)))
	LDFLAGS+=-L$(HOME)/tool/openmpi/lib
	LDFLAGS+=-L$(HOME)/tool/openblas/openblas/lib
else
ifneq (,$(findstring Zander,$(HOSTNAME)))
	LDFLAGS+=-L$(LIBDIR)/openblas/lib
endif
endif
endif

# vpath
VPATH = $(SRCDIR) \
	$(SRCDIR)/config \
	$(SRCDIR)/helper \
	$(SRCDIR)/sgd \
	$(SRCDIR)/layer \
	$(SRCDIR)/connection \
	$(SRCDIR)/network \
	$(SRCDIR)/master \
	$(SRCDIR)/slave \
	$(SRCDIR)/data

# src files
SRCS=\
	$(SRCDIR)/mpi.cpp \
	$(SRCDIR)/helper/matrix.cpp \
	$(SRCDIR)/helper/nonlinearity.cpp \
	$(SRCDIR)/sgd/sgd.cpp \
	$(SRCDIR)/sgd/adagrad.cpp \
	$(SRCDIR)/sgd/adadelta.cpp \
	$(SRCDIR)/sgd/rmsprop.cpp \
	$(SRCDIR)/layer/rnn_layer.cpp \
	$(SRCDIR)/layer/rnn_input_layer.cpp \
	$(SRCDIR)/layer/rnn_lstm_layer.cpp \
	$(SRCDIR)/layer/rnn_softmax_layer.cpp \
	$(SRCDIR)/layer/rnn_mse_layer.cpp \
	$(SRCDIR)/connection/rnn_connection.cpp \
	$(SRCDIR)/network/rnn_lstm.cpp \
	$(SRCDIR)/network/rnn_translator.cpp \
	$(SRCDIR)/master/master.cpp \
	$(SRCDIR)/slave/slave.cpp \
	$(SRCDIR)/data/mnist.cpp \
	$(SRCDIR)/data/sequence_data.cpp

# obj files using patsubst matching
OBJS=$(SRCS:%.cpp=%.o)

# nothing to do here
# .PHONY: 

# all comes first in the file, so it is the default 
all : MPI

# compile main program parallelSGD from all objs 
MPI: $(OBJS)
	$(CXX) $(CXXFLAGS) $(INCFLAGS) $(LDFLAGS) $^ -o $@

# order-only prerequisites for OBJDIR
$(OBJS): | $(OBJDIR)
$(OBJDIR):
	mkdir -p $@

# compile all objs from corresponding %.cpp file and all other *.h files
%.o: %.cpp 
	$(CXX) $(CXXFLAGS) $(INCFLAGS) $(LDFLAGS) $< -c -o $@

# clean
clean:
	rm -rf $(OBJS) MPI
